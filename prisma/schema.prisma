generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  image     String?
  role      Role       @default(USER)
  comments  Comment[]
  bookmarks Bookmark[]
  likes     Like[]
  posts     Post[]
  projects  Project[]
  createdAt DateTime   @default(now())
}

enum Role {
  USER
  ADMIN
}

model Post {
  id        String     @id @default(cuid())
  title     String
  slug      String     @unique
  content   String
  thumbnail String?
  viewCount Int        @default(0)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  tags      Tag[]      @relation("PostTags")
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  parent    Comment?  @relation("ReplyRelation", fields: [parentId], references: [id])
  replies   Comment[] @relation("ReplyRelation")
  createdAt DateTime  @default(now())
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  githubUrl   String?
  liveUrl     String?
  techStack   Json // ["Next.js", "TypeScript", ...] 형태로 저장
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
